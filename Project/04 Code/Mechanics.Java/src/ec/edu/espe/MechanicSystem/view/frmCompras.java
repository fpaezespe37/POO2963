/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.espe.MechanicSystem.view;

import com.google.gson.Gson;
import com.mongodb.BasicDBObject;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBCursor;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Fred
 */
public class frmCompras extends javax.swing.JFrame {

    /**
     * Creates new form frmCompras
     */
    
    DefaultTableModel modelo;
    public frmCompras() {
        initComponents();
        
         ListaElementosComprasBD();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        cmbx = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setLocation(new java.awt.Point(100, 50));

        jLabel1.setText("Nombre: ");

        jLabel2.setText("Servicio");

        cmbx.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Cambio de Aceite", "Cambio de motor", "Alineacion", "Balanceo", "Cambio de pastillas", " " }));
        cmbx.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbxItemStateChanged(evt);
            }
        });
        cmbx.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbxActionPerformed(evt);
            }
        });

        jLabel3.setText("Servicio Prestado");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Nombre", "Servicio"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jButton2.setText("Guardar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton1.setText("Cerrar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3))
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(cmbx, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(64, 64, 64)
                .addComponent(jButton2)
                .addGap(78, 78, 78))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cmbx, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(60, 60, 60)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton1))
                .addContainerGap(233, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbxActionPerformed

    private void cmbxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbxItemStateChanged
        // TODO add your handling code here:
        jTextField2.setText((String) cmbx.getSelectedItem());
    }//GEN-LAST:event_cmbxItemStateChanged

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
               
        FileWriter fw = null;
           PrintWriter pw = null;
        
        try {
            fw = new FileWriter("servicios.txt",true);
            pw = new PrintWriter(fw);
            String nombre = jTextField1.getText();
            String servicio = jTextField2.getText();
            
           

            pw.println( "{'nombre' :" + nombre +';'+"'servicio' :" + servicio + "}" );
            pw.close();
        } catch (IOException ex) {
            Logger.getLogger(frmRegister.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Gson gson = new Gson();
        CrearComprasMongo();

    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        System.exit( 0 );
    }//GEN-LAST:event_jButton1ActionPerformed
    private void CrearComprasMongo() {
        ArrayList<Persona> compras = new ArrayList<Persona>();
        compras.add(new Persona(jTextField1.getText().toString(),jTextField2.getText().toString()));
        //compras.add(new Persona(jTextField2.getText().toString()));
        try {
            // PASO 1: Conexión al Server de MongoDB Pasandole el host y el puerto
            MongoClient mongoClient = new MongoClient("localhost", 27017);

            // PASO 2: Conexión a la base de datos
            DB db = mongoClient.getDB("Mechanics");

            // PASO 3: Obtenemos una coleccion para trabajar con ella
            DBCollection collection = db.getCollection("Compras");

            // PASO 4: CRUD (Create-Read-Update-Delete)
            // PASO 4.1: "CREATE" -> Metemos los objetos Nombre Persona (o documentos en Mongo) en la coleccion Personas
            for (Persona pers : compras) {
                collection.insert(pers.toDBObjectCompras());
            }

            // PASO 4.2.1: "READ" -> Leemos todos los documentos de la base de datos
            int numDocumentos = (int) collection.getCount();
            System.out.println("Número de documentos en la colección : " + numDocumentos + "\n");

            // Busco todos los documentos de la colección y los imprimo
            DBCursor cursor = collection.find();
            try {
                while (cursor.hasNext()) {
                    System.out.println(cursor.next().toString());
                }
            } finally {
                cursor.close();
            }

            // PASO 4.2.2: "READ" -> Hacemos una Query con condiciones (Buscar Futbolistas que sean delanteros) y lo pasamos a un objeto Java
            System.out.println("\nCompras que estan en estado activo");
            DBObject query = new BasicDBObject("compras", new BasicDBObject("$regex", "compras")); // busqueda por Administrador o Operaciones
            cursor = collection.find(query);
            DefaultListModel modeloLista = new DefaultListModel();

            try {
                while (cursor.hasNext()) {
                    Persona persona = new Persona((BasicDBObject) cursor.next());
                    modeloLista.addElement(persona.toString());
                }
            } finally {
                cursor.close();
            }

            // PASO FINAL: Cerrar la conexion
            mongoClient.close();

        } catch (UnknownHostException ex) {
            System.out.println("Exception al conectar al server de Mongo: " + ex.getMessage());
        }
        ListaElementosComprasBD();
       
    }

    private void ListaElementosComprasBD() {
        ArrayList<Persona> personas = new ArrayList<Persona>();

        try {
            // PASO 1: Conexión al Server de MongoDB Pasandole el host y el puerto
            MongoClient mongoClient = new MongoClient("localhost", 27017);

            // PASO 2: Conexión a la base de datos
            DB db = mongoClient.getDB("Mechanics");

            // PASO 3: Obtenemos una coleccion para trabajar con ella
            DBCollection collection = db.getCollection("Compras");

            // PASO 4: CRUD (Create-Read-Update-Delete)
            // PASO 4.2.1: "READ" -> Leemos todos los documentos de la base de datos
            int numDocumentos = (int) collection.getCount();

            // Busco todos los documentos de la colección y los imprimo
            DBCursor cursor = collection.find();

            DefaultListModel modeloLista = new DefaultListModel();
            DefaultTableModel model;
            model = new DefaultTableModel();
            model.addColumn("Servicio");
            this.jTable1.setModel(model);

            String info[] = new String[3];
            
            try {
                while (cursor.hasNext()) {
                    info[0] = cursor.next().toString();
                    
                    model.addRow(info);
                    jTable1.setModel(model);
                }
            } finally {
                cursor.close();
            }

        } catch (UnknownHostException ex) {
            System.out.println("Exception al conectar al server de Mongo: " + ex.getMessage());
        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmCompras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmCompras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmCompras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmCompras.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmCompras().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cmbx;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
